// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace KoiFishCare.Migrations
{
    [DbContext(typeof(KoiFishVeterinaryServiceContext))]
    [Migration("20240921142529_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Having", b =>
                {
                    b.Property<string>("VetId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VetID");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.HasKey("VetId", "SlotId")
                        .HasName("PK__Having__C5F79CAAFED7EB1E");

                    b.HasIndex("SlotId");

                    b.ToTable("Having", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586AD67902E");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly?>("BookingDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("BookingTime")
                        .HasColumnType("time");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("DistanceId")
                        .HasColumnType("int")
                        .HasColumnName("DistanceID");

                    b.Property<string>("KoiOrPoolId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("KoiOrPoolID");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("VetId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VetID");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__73951ACD523EDE51");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistanceId");

                    b.HasIndex("KoiOrPoolId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.HasIndex("VetId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID")
                        .HasDefaultValueSql("('C'+left(newid(),(8)))");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("DefaultAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8E0E2996A");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Customer__349DA5876005DF31")
                        .IsUnique()
                        .HasFilter("[AccountID] IS NOT NULL");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Distance", b =>
                {
                    b.Property<int>("DistanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DistanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceId"));

                    b.Property<decimal?>("Kilometer")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DistanceId")
                        .HasName("PK__Distance__A24E2A1C7F790CA5");

                    b.ToTable("Distance", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF67764D7CE");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.KoiOrPool", b =>
                {
                    b.Property<string>("KoiOrPoolId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("KoiOrPoolID")
                        .HasDefaultValueSql("('K'+left(newid(),(8)))");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsPool")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("KoiOrPoolId")
                        .HasName("PK__KoiOrPoo__0612556F20091BA1");

                    b.HasIndex("CustomerId");

                    b.ToTable("KoiOrPool", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Qrcode")
                        .HasColumnType("text")
                        .HasColumnName("QRCode");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__9B556A58D9830F1F");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.PrescriptionRecord", b =>
                {
                    b.Property<int>("PrescriptionRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionRecordId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("DiseaseName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Medication")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text");

                    b.HasKey("PrescriptionRecordId")
                        .HasName("PK__Prescrip__1D4AC3184A0205C0");

                    b.HasIndex("BookingId");

                    b.ToTable("PrescriptionRecord", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int")
                        .HasColumnName("Estimated_duration");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__C51BB0EA33D1CD3F");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("WeekDate")
                        .HasColumnType("date");

                    b.HasKey("SlotId")
                        .HasName("PK__Slot__0A124A4F64E36AD6");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StaffID")
                        .HasDefaultValueSql("('S'+left(newid(),(8)))");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<bool?>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__96D4AAF72FA07439");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Staff__349DA587A55D4CB8")
                        .IsUnique()
                        .HasFilter("[AccountID] IS NOT NULL");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("WebApplication1.Models.Veterinarian", b =>
                {
                    b.Property<string>("VetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VetID")
                        .HasDefaultValueSql("('V'+left(newid(),(8)))");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("Experience_years");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("VetId")
                        .HasName("PK__Veterina__2556B80E6CF88BB2");

                    b.HasIndex(new[] { "AccountId" }, "UQ__Veterina__349DA5875B7204C7")
                        .IsUnique()
                        .HasFilter("[AccountID] IS NOT NULL");

                    b.ToTable("Veterinarian", (string)null);
                });

            modelBuilder.Entity("Having", b =>
                {
                    b.HasOne("WebApplication1.Models.Slot", null)
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Having__SlotID__4D94879B");

                    b.HasOne("WebApplication1.Models.Veterinarian", null)
                        .WithMany()
                        .HasForeignKey("VetId")
                        .IsRequired()
                        .HasConstraintName("FK__Having__VetID__4CA06362");
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.HasOne("WebApplication1.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Booking__Custome__5AEE82B9");

                    b.HasOne("WebApplication1.Models.Distance", "Distance")
                        .WithMany("Bookings")
                        .HasForeignKey("DistanceId")
                        .HasConstraintName("FK__Booking__Distanc__5CD6CB2B");

                    b.HasOne("WebApplication1.Models.KoiOrPool", "KoiOrPool")
                        .WithMany("Bookings")
                        .HasForeignKey("KoiOrPoolId")
                        .HasConstraintName("FK__Booking__KoiOrPo__5DCAEF64");

                    b.HasOne("WebApplication1.Models.Payment", "Payment")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Booking__Payment__59063A47");

                    b.HasOne("WebApplication1.Models.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Booking__Service__5812160E");

                    b.HasOne("WebApplication1.Models.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .HasConstraintName("FK__Booking__SlotID__59FA5E80");

                    b.HasOne("WebApplication1.Models.Veterinarian", "Vet")
                        .WithMany("Bookings")
                        .HasForeignKey("VetId")
                        .HasConstraintName("FK__Booking__VetID__5BE2A6F2");

                    b.Navigation("Customer");

                    b.Navigation("Distance");

                    b.Navigation("KoiOrPool");

                    b.Navigation("Payment");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.HasOne("WebApplication1.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("WebApplication1.Models.Customer", "AccountId")
                        .HasConstraintName("FK__Customer__Accoun__412EB0B6");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebApplication1.Models.Feedback", b =>
                {
                    b.HasOne("WebApplication1.Models.Booking", "Booking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Feedback__Bookin__60A75C0F");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("WebApplication1.Models.KoiOrPool", b =>
                {
                    b.HasOne("WebApplication1.Models.Customer", "Customer")
                        .WithMany("KoiOrPools")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__KoiOrPool__Custo__5535A963");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApplication1.Models.PrescriptionRecord", b =>
                {
                    b.HasOne("WebApplication1.Models.Booking", "Booking")
                        .WithMany("PrescriptionRecords")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Prescript__Booki__6383C8BA");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("WebApplication1.Models.Staff", b =>
                {
                    b.HasOne("WebApplication1.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("WebApplication1.Models.Staff", "AccountId")
                        .HasConstraintName("FK__Staff__AccountID__3B75D760");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebApplication1.Models.Veterinarian", b =>
                {
                    b.HasOne("WebApplication1.Models.Account", "Account")
                        .WithOne("Veterinarian")
                        .HasForeignKey("WebApplication1.Models.Veterinarian", "AccountId")
                        .HasConstraintName("FK__Veterinar__Accou__45F365D3");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebApplication1.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("WebApplication1.Models.Booking", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("PrescriptionRecords");
                });

            modelBuilder.Entity("WebApplication1.Models.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("KoiOrPools");
                });

            modelBuilder.Entity("WebApplication1.Models.Distance", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.KoiOrPool", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("WebApplication1.Models.Veterinarian", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
