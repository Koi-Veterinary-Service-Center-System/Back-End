// <auto-generated />
using System;
using KoiFishCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiFishCare.Migrations
{
    [DbContext(typeof(KoiFishVeterinaryServiceContext))]
    partial class KoiFishVeterinaryServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiFishCare.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DistanceID")
                        .HasColumnType("int");

                    b.Property<int?>("KoiOrPoolID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("VetID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DistanceID");

                    b.HasIndex("KoiOrPoolID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("SlotID");

                    b.HasIndex("VetID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.Distance", b =>
                {
                    b.Property<int>("DistanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistanceID"));

                    b.Property<decimal>("Kilometer")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("DistanceID");

                    b.ToTable("Distances");

                    b.HasData(
                        new
                        {
                            DistanceID = 1,
                            Kilometer = 5.0m,
                            Price = 20.00m
                        },
                        new
                        {
                            DistanceID = 2,
                            Kilometer = 15.0m,
                            Price = 50.00m
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("BookingID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("KoiFishCare.Models.KoiOrPool", b =>
                {
                    b.Property<int>("KoiOrPoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KoiOrPoolID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPool")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KoiOrPoolID");

                    b.HasIndex("CustomerID");

                    b.ToTable("KoiOrPools");

                    b.HasData(
                        new
                        {
                            KoiOrPoolID = 1,
                            CustomerID = "c1",
                            Description = "A beautiful koi pond owned by John.",
                            IsPool = false,
                            Name = "John's Koi Pond"
                        },
                        new
                        {
                            KoiOrPoolID = 2,
                            CustomerID = "c2",
                            Description = "A large swimming pool owned by the Smith family.",
                            IsPool = true,
                            Name = "Smith's Pool"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<string>("Qrcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            Qrcode = "qrcode1",
                            Type = "Credit Card"
                        },
                        new
                        {
                            PaymentID = 2,
                            Qrcode = "qrcode2",
                            Type = "PayPal"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.PrescriptionRecord", b =>
                {
                    b.Property<int>("PrescriptionRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionRecordID"));

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("DiseaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionRecordID");

                    b.HasIndex("BookingID");

                    b.ToTable("PrescriptionRecords");
                });

            modelBuilder.Entity("KoiFishCare.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatedDuration")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            Description = "A general health check for Koi fish.",
                            EstimatedDuration = 1.5,
                            Price = 150.00m,
                            ServiceName = "Koi Health Check"
                        },
                        new
                        {
                            ServiceID = 2,
                            Description = "Comprehensive pool maintenance service.",
                            EstimatedDuration = 2.0,
                            Price = 250.00m,
                            ServiceName = "Pool Maintenance"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Slot", b =>
                {
                    b.Property<int>("SlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotID"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("WeekDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlotID");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            SlotID = 1,
                            EndTime = new TimeOnly(10, 0, 0),
                            StartTime = new TimeOnly(9, 0, 0),
                            WeekDate = "Monday"
                        },
                        new
                        {
                            SlotID = 2,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(11, 0, 0),
                            WeekDate = "Monday"
                        },
                        new
                        {
                            SlotID = 3,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(9, 0, 0),
                            WeekDate = "Tuesday"
                        },
                        new
                        {
                            SlotID = 4,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(11, 0, 0),
                            WeekDate = "Tuesday"
                        },
                        new
                        {
                            SlotID = 5,
                            EndTime = new TimeOnly(12, 0, 0),
                            StartTime = new TimeOnly(11, 0, 0),
                            WeekDate = "Wednesday"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("KoiFishCare.Models.VetSlot", b =>
                {
                    b.Property<string>("VetID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SlotID")
                        .HasColumnType("int");

                    b.Property<bool>("isBooked")
                        .HasColumnType("bit");

                    b.HasKey("VetID", "SlotID");

                    b.HasIndex("SlotID");

                    b.ToTable("VetSlots");

                    b.HasData(
                        new
                        {
                            VetID = "v1",
                            SlotID = 1,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v2",
                            SlotID = 1,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v1",
                            SlotID = 2,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v1",
                            SlotID = 3,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v2",
                            SlotID = 4,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v3",
                            SlotID = 4,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v3",
                            SlotID = 5,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v4",
                            SlotID = 1,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v5",
                            SlotID = 5,
                            isBooked = false
                        },
                        new
                        {
                            VetID = "v4",
                            SlotID = 3,
                            isBooked = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "38e7f48f-5a54-46af-9c5e-204ba4412831",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "d3e48e17-a793-4636-ad58-66e10c0aa52f",
                            Name = "Vet",
                            NormalizedName = "VET"
                        },
                        new
                        {
                            Id = "c89ff6a7-0c08-4e9a-91c5-88e090548240",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "b955216d-a59c-4caa-b7fe-fcc522e6393f",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KoiFishCare.Models.Customer", b =>
                {
                    b.HasBaseType("KoiFishCare.Models.User");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c1",
                            AccessFailedCount = 0,
                            Address = "789 Customer Lane",
                            ConcurrencyStamp = "b2483a7d-7765-4511-95ec-ad021753c9ac",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            Gender = false,
                            ImagePublicId = "customer1_image_id",
                            ImageURL = "https://example.com/customer1.jpg",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedUserName = "ALICU",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3d451ba-7d0d-4019-8a40-3dad88116277",
                            TwoFactorEnabled = false,
                            UserName = "alicu"
                        },
                        new
                        {
                            Id = "c2",
                            AccessFailedCount = 0,
                            Address = "123 Customer Ave",
                            ConcurrencyStamp = "0b26ea0e-739b-4d68-9326-b5bfde69f47d",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            Gender = true,
                            ImagePublicId = "customer2_image_id",
                            ImageURL = "https://example.com/customer2.jpg",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedUserName = "BOOOOOB",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4495f01-8212-443b-9ef2-401daa7e9d1e",
                            TwoFactorEnabled = false,
                            UserName = "boooob"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Staff", b =>
                {
                    b.HasBaseType("KoiFishCare.Models.User");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerID")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Staffs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "s1",
                            AccessFailedCount = 0,
                            Address = "789 Staff Lane",
                            ConcurrencyStamp = "c7acf0be-dc2a-40e8-a892-3216f7da8ab9",
                            EmailConfirmed = false,
                            FirstName = "staff1",
                            Gender = false,
                            ImagePublicId = "staff_image_id",
                            ImageURL = "https://example.com/staff1.jpg",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedUserName = "SITAP",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1aca6ef1-99a6-4e9b-aa0e-e5352c248dca",
                            TwoFactorEnabled = false,
                            UserName = "sitap",
                            IsManager = false
                        },
                        new
                        {
                            Id = "m2",
                            AccessFailedCount = 0,
                            Address = "123 Staff Ave",
                            ConcurrencyStamp = "457084d8-6c7f-4516-99e9-4d74e96bf6c2",
                            EmailConfirmed = false,
                            FirstName = "manager",
                            Gender = true,
                            ImagePublicId = "staff2_image_id",
                            ImageURL = "https://example.com/staff2.jpg",
                            LastName = "Williams",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4ca127f-bfb9-4dbc-ae28-967a0b77afb7",
                            TwoFactorEnabled = false,
                            UserName = "manager",
                            IsManager = true
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Veterinarian", b =>
                {
                    b.HasBaseType("KoiFishCare.Models.User");

                    b.ToTable("Veterinarians", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "v1",
                            AccessFailedCount = 0,
                            Address = "123 Vet St.",
                            ConcurrencyStamp = "6612ac37-d6ec-404a-9e50-e3746203d712",
                            EmailConfirmed = false,
                            ExperienceYears = 10,
                            FirstName = "John",
                            Gender = true,
                            ImagePublicId = "vet1_image_id",
                            ImageURL = "https://example.com/vet1.jpg",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedUserName = "JOHNDOE",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a97e080-8426-4f46-86bd-de4e457659a4",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "v2",
                            AccessFailedCount = 0,
                            Address = "456 Vet St.",
                            ConcurrencyStamp = "ce70d49c-0a89-4bb1-aab5-ead1a2b64d46",
                            EmailConfirmed = false,
                            ExperienceYears = 8,
                            FirstName = "Jane",
                            Gender = false,
                            ImagePublicId = "vet2_image_id",
                            ImageURL = "https://example.com/vet2.jpg",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedUserName = "JANESMITH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "748b8b45-700c-4ca0-bc2d-2bd0a6da78fd",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "v3",
                            AccessFailedCount = 0,
                            Address = "456 Vet St.",
                            ConcurrencyStamp = "59703c08-07de-40e1-a82d-93680bcaf837",
                            EmailConfirmed = false,
                            ExperienceYears = 8,
                            FirstName = "vet3",
                            Gender = false,
                            ImagePublicId = "vet2_image_id",
                            ImageURL = "https://example.com/vet2.jpg",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedUserName = "VET3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28b40ea4-2c25-4dec-b4c2-87d3c89e2e2a",
                            TwoFactorEnabled = false,
                            UserName = "vet3"
                        },
                        new
                        {
                            Id = "v4",
                            AccessFailedCount = 0,
                            Address = "456 Vet St.",
                            ConcurrencyStamp = "d12f256f-97ad-4676-b914-301cae8b1dc5",
                            EmailConfirmed = false,
                            ExperienceYears = 8,
                            FirstName = "Vet 4",
                            Gender = false,
                            ImagePublicId = "vet2_image_id",
                            ImageURL = "https://example.com/vet2.jpg",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedUserName = "VETERIANARY",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d522c4d2-5af0-4b98-b857-c35256424449",
                            TwoFactorEnabled = false,
                            UserName = "veterianary"
                        },
                        new
                        {
                            Id = "v5",
                            AccessFailedCount = 0,
                            Address = "456 Vet St.",
                            ConcurrencyStamp = "db1b3f8d-2722-4320-bd50-3f6762996833",
                            EmailConfirmed = false,
                            ExperienceYears = 8,
                            FirstName = "Vet 5",
                            Gender = false,
                            ImagePublicId = "vet2_image_id",
                            ImageURL = "https://example.com/vet2.jpg",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedUserName = "VET1000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "440e892a-1072-48c3-a5d1-cf2e3b8db51f",
                            TwoFactorEnabled = false,
                            UserName = "vet1000000"
                        });
                });

            modelBuilder.Entity("KoiFishCare.Models.Booking", b =>
                {
                    b.HasOne("KoiFishCare.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.Distance", "Distance")
                        .WithMany("Bookings")
                        .HasForeignKey("DistanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.KoiOrPool", "KoiOrPool")
                        .WithMany("Bookings")
                        .HasForeignKey("KoiOrPoolID");

                    b.HasOne("KoiFishCare.Models.Payment", "Payment")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.Veterinarian", "Veterinarian")
                        .WithMany("Bookings")
                        .HasForeignKey("VetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Distance");

                    b.Navigation("KoiOrPool");

                    b.Navigation("Payment");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("KoiFishCare.Models.Feedback", b =>
                {
                    b.HasOne("KoiFishCare.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("KoiFishCare.Models.KoiOrPool", b =>
                {
                    b.HasOne("KoiFishCare.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiFishCare.Models.PrescriptionRecord", b =>
                {
                    b.HasOne("KoiFishCare.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("KoiFishCare.Models.VetSlot", b =>
                {
                    b.HasOne("KoiFishCare.Models.Slot", "Slot")
                        .WithMany("VetSlots")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.Veterinarian", "Veterinarian")
                        .WithMany("VetSlots")
                        .HasForeignKey("VetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiFishCare.Models.Customer", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithOne()
                        .HasForeignKey("KoiFishCare.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiFishCare.Models.Staff", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithOne()
                        .HasForeignKey("KoiFishCare.Models.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiFishCare.Models.Veterinarian", b =>
                {
                    b.HasOne("KoiFishCare.Models.User", null)
                        .WithOne()
                        .HasForeignKey("KoiFishCare.Models.Veterinarian", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiFishCare.Models.Distance", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.KoiOrPool", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.Payment", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.Slot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("VetSlots");
                });

            modelBuilder.Entity("KoiFishCare.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("KoiFishCare.Models.Veterinarian", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("VetSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
